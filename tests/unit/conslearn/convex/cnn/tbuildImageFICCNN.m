classdef tbuildImageFICCNN < matlab.unittest.TestCase

    % Copyright 2024 The Mathworks, Inc.

    properties
        ShortInput
        LongInput
    end

    methods (TestClassSetup)

        function setupTestNetworks(testCase)
            % Example IO for minimum list of required inputs
            testCase.ShortInput.Arguments = {[10 10], 5, [3; 3], [2; 4]};
            testCase.ShortInput.Network = dlnetwork([ ...
                imageInputLayer([10 10], Normalization="none", Name="input"); ...
                convolution2dLayer(3, 2, Stride=1, DilationFactor=1, ...
                Padding="same", PaddingValue=0, Name="conv2d_1"); ...
                reluLayer(Name="cnd_1"); ...
                batchNormalizationLayer(Name="batchnorm_+_1"); ...
                convolution2dLayer(3, 4, Stride=1, DilationFactor=1, ...
                Padding="same", PaddingValue=0, Name="conv2d_+_2"); ...
                reluLayer(Name="cnd_2"); ...
                batchNormalizationLayer(Name="batchnorm_+_2"); ...
                globalAveragePooling2dLayer(Name="global_avg_pool"); ...
                fullyConnectedLayer(5, Name="fc_+_end")]);

            % Example IO for full list of NVPs
            testCase.LongInput.Arguments = {[8 6 3], 10, [2; 4; 6], [3; 3; 3], ...
                "Stride", [1; 2; 3], "DilationFactor", [2; 2; 2], "Padding", ...
                ["same"; "same"; "same"], "PaddingValue", [-1; -2; -3], ...
                "ConvexNonDecreasingActivation", "softplus"};
            testCase.LongInput.Network = dlnetwork([ ...
                imageInputLayer([8 6 3], Normalization="none", Name="input"); ...
                convolution2dLayer(2, 3, Stride=1, DilationFactor=2, ...
                Padding="same", PaddingValue=-1, Name="conv2d_1"); ...
                softplusLayer(Name="cnd_1"); ...
                batchNormalizationLayer(Name="batchnorm_+_1"); ...
                convolution2dLayer(4, 3, Stride=2, DilationFactor=2, ... 
                Padding="same", PaddingValue=-2, Name="conv2d_+_2"); ...
                softplusLayer(Name="cnd_2"); ...
                batchNormalizationLayer(Name="batchnorm_+_2"); ...
                convolution2dLayer(6, 3, Stride=3, DilationFactor=2, ...
                Padding="same", PaddingValue=-3, Name="conv2d_+_3"); ...
                softplusLayer(Name="cnd_3"); ...
                batchNormalizationLayer(Name="batchnorm_+_3"); ...
                globalAveragePooling2dLayer(Name="global_avg_pool"); ...
                fullyConnectedLayer(10, Name="fc_+_end")]);
        end

    end
        
    properties (TestParameter)

        BadInputSize = struct( ... 
            "Empty", struct("Value", [], "ErrID", "MATLAB:validators:mustBeNonempty"), ...
            "NonReal", struct("Value", [8i 6i 3i], "ErrID", "MATLAB:validators:mustBeReal"), ...
            "NonInteger", struct("Value", [8.5 6.5 3.5], "ErrID", "MATLAB:validators:mustBeInteger"), ...
            "NonPositive", struct("Value", [-8 -6 -3], "ErrID", "MATLAB:validators:mustBePositive"), ...
            "Scalar", struct("Value", 8, "ErrID", ?MException));

        BadOutputSize = struct( ...
            "Empty", struct("Value", [], "ErrID", "MATLAB:validation:IncompatibleSize"), ...
            "Vector", struct("Value", [2 4], "ErrID", "MATLAB:validation:IncompatibleSize"), ...
            "NonReal", struct("Value", 1i, "ErrID", "MATLAB:validators:mustBeReal"),  ...
            "NonInteger", struct("Value", 1.5, "ErrID", "MATLAB:validators:mustBeInteger"), ...
            "NonPositive", struct("Value", -1, "ErrID", "MATLAB:validators:mustBePositive"));

        BadFilterSize = struct( ...
            "Empty", struct("Value", [], "ErrID", "MATLAB:validators:mustBeNonempty"), ...
            "NonReal", struct("Value", [2i; 4i; 6i], "ErrID", "MATLAB:validators:mustBeReal"), ...
            "NonInteger", struct("Value", [2.5; 4.5; 6.5], "ErrID", "MATLAB:validators:mustBeInteger"), ...
            "NonPositive", struct("Value", [-2; -4; -6], "ErrID", "MATLAB:validators:mustBePositive"), ...
            "ThreeColumn", struct("Value", ones(3, 3), "ErrID", ?MException));

        BadNumFilters = struct( ...
            "Empty", struct("Value", [], "ErrID", "MATLAB:validators:mustBeNonempty"), ...
            "NonReal", struct("Value", [3i; 3i; 3i], "ErrID", "MATLAB:validators:mustBeReal"), ...
            "NonInteger", struct("Value", [3.5; 3.5; 3.5], "ErrID", "MATLAB:validators:mustBeInteger"), ...
            "NonPositive", struct("Value", [-3; -3; -3], "ErrID", "MATLAB:validators:mustBePositive"), ...
            "WrongLength", struct("Value", [3; 3; 3; 4], "ErrID", ?MException));

        BadStride = struct( ...
            "Empty", struct("Value", [], "ErrID", "MATLAB:validators:mustBeNonempty"), ...
            "NonReal", struct("Value", [1i; 2i; 3i], "ErrID", "MATLAB:validators:mustBeReal"),  ...
            "NonInteger", struct("Value", [1.5; 2.5; 3.5], "ErrID", "MATLAB:validators:mustBeInteger"), ...
            "NonPositive", struct("Value", [-1; -2; -3], "ErrID", "MATLAB:validators:mustBePositive"), ...
            "ThreeColumn", struct("Value", ones(3, 3), "ErrID", ?MException), ...
            "WrongLength", struct("Value", [1; 2; 3; 4], "ErrID", ?MException));

        BadDilationFactor = struct( ...
            "Empty", struct("Value", [], "ErrID", "MATLAB:validators:mustBeNonempty"), ...
            "NonReal", struct("Value", [2i; 2i; 2i], "ErrID", "MATLAB:validators:mustBeReal"),  ...
            "NonInteger", struct("Value", [2.5; 2.5; 2.5], "ErrID", "MATLAB:validators:mustBeInteger"), ...
            "NonPositive", struct("Value", [-2; -2; -2], "ErrID", "MATLAB:validators:mustBePositive"), ...
            "ThreeColumn", struct("Value", 2*ones(3, 3), "ErrID", ?MException), ...
            "WrongLength", struct("Value", [2; 2; 2; 4], "ErrID", ?MException));

        BadPadding = struct( ...
            "Empty", struct("Value", "", "ErrID", "MATLAB:validators:mustBeNonzeroLengthText"), ...
            "NonMember", struct("Value", "convex", "ErrID", "MATLAB:validators:mustBeMember"), ...
            "WrongLength", struct("Value", repelem("causal", 4), "ErrID", ?MException));

        BadPaddingValue = struct( ...
            "Empty", struct("Value", [], "ErrID", "MATLAB:validators:mustBeNonempty"), ...
            "NonReal", struct("Value", [-1i; -2i; -3i], "ErrID", "MATLAB:validators:mustBeReal"),  ...
            "WrongLength", struct("Value", [1; 1; 1; 4], "ErrID", ?MException));

        BadActivation = struct( ...
            "Empty", struct("Value", "", "ErrID", "MATLAB:validators:mustBeNonzeroLengthText"), ...
            "Vector", struct("Value", repelem("relu", 3), "ErrID", "MATLAB:validators:mustBeTextScalar"), ...
            "NonMember", struct("Value", "convex", "ErrID", "MATLAB:validators:mustBeMember"));

    end

    methods (Test)

        function checkRequiredInputs(testCase)
            % Verify correct network built for minimal list of required
            % argumetns

            inputArgs = testCase.ShortInput.Arguments;
            expectedNet = testCase.ShortInput.Network;
            expectedSize = cellfun(@size, expectedNet.Learnables.Value, UniformOutput=false);

            actualNet = conslearn.convex.cnn.buildImageFICCNN(inputArgs{:});
            actualSize = cellfun(@size, actualNet.Learnables.Value, UniformOutput=false);

            testCase.assertEqual(actualSize, expectedSize, ...
                "Learnables size incorrect with only required arguments specified.");
            expectedNet.Learnables.Value = actualNet.Learnables.Value; % Do not check learnables are equal

            testCase.verifyEqual(actualNet, expectedNet, ...
                "Network parameters incorrect with only required arguments specified.");
        end

        function checkOptionalInputs(testCase)
            % Verify correct network built for full list of NVPs

            inputArgs = testCase.LongInput.Arguments;
            expectedNet = testCase.LongInput.Network;
            expectedSize = cellfun(@size, expectedNet.Learnables.Value, UniformOutput=false);

            actualNet = conslearn.convex.cnn.buildImageFICCNN(inputArgs{:});
            actualSize = cellfun(@size, actualNet.Learnables.Value, UniformOutput=false);

            testCase.assertEqual(actualSize, expectedSize, ...
                "Learnables size incorrect with all optional arguments specified.");
            expectedNet.Learnables.Value = actualNet.Learnables.Value; % Do not check learnables are equal

            testCase.verifyEqual(actualNet, expectedNet, ...
                "Network parameters incorrect with all optional arguments specified.");
        end

        function badInputSizeErrors(testCase, BadInputSize)
            badInput = testCase.LongInput.Arguments; 
            badInput{1} = BadInputSize.Value;
            buildNet = @() conslearn.convex.cnn.buildImageFICCNN(badInput{:});
            testCase.verifyError(buildNet, BadInputSize.ErrID);
        end

        function badOutputSizeErrors(testCase, BadOutputSize)
            badInput = testCase.LongInput.Arguments; 
            badInput{2} = BadOutputSize.Value;
            buildNet = @() conslearn.convex.cnn.buildImageFICCNN(badInput{:});
            testCase.verifyError(buildNet, BadOutputSize.ErrID);
        end
   
        function badFilterSizeErrors(testCase, BadFilterSize)
            badInput = testCase.LongInput.Arguments; 
            badInput{3} = BadFilterSize.Value;
            buildNet = @() conslearn.convex.cnn.buildImageFICCNN(badInput{:});
            testCase.verifyError(buildNet, BadFilterSize.ErrID);
        end

        function badNumFiltersErrors(testCase, BadNumFilters)
            badInput = testCase.LongInput.Arguments;
            badInput{4} = BadNumFilters.Value;
            buildNet = @() conslearn.convex.cnn.buildImageFICCNN(badInput{:});
            testCase.verifyError(buildNet, BadNumFilters.ErrID);
        end

        function badStrideErrors(testCase, BadStride)
            badInput = testCase.LongInput.Arguments;
            badInput{6} = BadStride.Value;
            buildNet = @() conslearn.convex.cnn.buildImageFICCNN(badInput{:});
            testCase.verifyError(buildNet, BadStride.ErrID);
        end
   
        function badDilationFactorErrors(testCase, BadDilationFactor)
            badInput = testCase.LongInput.Arguments;
            badInput{8} = BadDilationFactor.Value;
            buildNet = @() conslearn.convex.cnn.buildImageFICCNN(badInput{:});
            testCase.verifyError(buildNet, BadDilationFactor.ErrID);
        end

        function badPaddingErrors(testCase, BadPadding)
            badInput = testCase.LongInput.Arguments;
            badInput{10} = BadPadding.Value;
            buildNet = @() conslearn.convex.cnn.buildImageFICCNN(badInput{:});
            testCase.verifyError(buildNet, BadPadding.ErrID);
        end
    
        function badPaddingValueErrors(testCase, BadPaddingValue)
            badInput = testCase.LongInput.Arguments;
            badInput{12} = BadPaddingValue.Value;
            buildNet = @() conslearn.convex.cnn.buildImageFICCNN(badInput{:});
            testCase.verifyError(buildNet, BadPaddingValue.ErrID);
        end

        function badActivationErrors(testCase, BadActivation)
            badInput = testCase.LongInput.Arguments;
            badInput{14} = BadActivation.Value;
            buildNet = @() conslearn.convex.cnn.buildImageFICCNN(badInput{:});
            testCase.verifyError(buildNet, BadActivation.ErrID);
        end
    
    end
end